<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <title>Add Notices</title>
  <link href="/style2.css" rel="stylesheet" type="text/css" />
  <link href="https://fonts.googleapis.com/css?family=Poppins:400,500,600,700&display=swap" rel="stylesheet" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: "Poppins", sans-serif;
    }

    .hero-section {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-image:
        linear-gradient(360deg, rgba(34, 34, 34, 0.7), rgba(34, 34, 34, 0.7)),
        url("images/staffDash.jpeg");
      background-position: center;
      background-size: cover;
      background-repeat: no-repeat;
    }

    .notices-section {
      text-align: center;
      /* Center-align all content in the notices section */
    }

    .notices-section h2 {
      margin-bottom: 20px;
      /* Optional: Add some margin below the heading */
    }

    form {
      background-color: #f7f7f7;
      padding: 30px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 600px;
      margin: 0 auto;
      text-align: center;
    }

    form h2 {

      font-size: 24px;
      margin-bottom: 20px;
      color: #333;

    }

    .form-group {
      margin-bottom: 20px;
      text-align: left;
    }

    label {
      display: block;
      font-weight: bold;
      margin-bottom: 10px;
      color: #333;
    }

    textarea {
      width: 100%;
      padding: 12px;
      font-size: 16px;
      border-radius: 5px;
      border: 1px solid #ccc;
      resize: vertical;
      font-family: inherit;
    }

    button {
      background-color: #ef5835;
      color: white;
      border: none;
      padding: 12px 25px;
      font-size: 16px;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #d04829;
    }

    .back-btn {
      background-color: #ef5835;
      color: white;
      border: none;
      padding: 12px 25px;
      font-size: 16px;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
      margin-left: 10px;
    }

    .back-btn:hover {
      background-color: #d04829;
    }

    /* Table Styles */
    .notices-table {
      width: 100%;
      max-width: 800px;
      margin: 20px auto;
      border-collapse: collapse;
      background-color: #ffffff;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      overflow: hidden;
    }

    .notices-table th,
    .notices-table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    .notices-table th {
      background-color: #ff7f5c;
      color: #ffffff;
    }

    .notices-table tr:hover {
      background-color: #f2f2f2;
    }

    /* Additional styling for the view notices button */
    .view-notices-btn {
      margin-top: 20px;
      padding: 12px 25px;
      background-color: #ef5835;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .view-notices-btn:hover {
      background-color: #d04829;
    }
  </style>
</head>

<body>
  <div class="hero-section">
    <div class="container">
      <!-- Form for adding notice -->
      <form id="noticeForm" onsubmit="return confirmSubmit(event)">
        <h2>Add Notice</h2>
        <div class="form-group">
          <label for="notice">Notice:</label>
          <textarea id="notice" name="notice" rows="4" cols="50" placeholder="Enter notice here..." required></textarea>
        </div>
        <div class="form-group">
          <button type="submit">Add Notice</button>
          <button type="button" class="back-btn" onclick="goBack()">Go Back</button>
        </div>
      </form>
      <!-- View Notices Button -->
      <button class="view-notices-btn" onclick="scrollToNotices()">View Notices</button>
    </div>
  </div>

  <div class="notices-section">
    <h2>All Notices</h2>
    <table class="notices-table">
      <thead>
        <tr>
          <th>Notice</th>
          <th>Date</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody id="noticesBody">
        <!-- Dynamic Content Will Be Added Here -->
      </tbody>
    </table>
  </div>

  <script>
    function confirmSubmit(event) {
      event.preventDefault(); // Prevent form submission
      const noticeText = document.getElementById('notice').value;
      if (confirm("Are you sure you want to add this notice?")) {
        addNotice(noticeText); // Call addNotice function
      }
    }

    function goBack() {
      window.location.href = "/staffDash"; // Adjust this path as necessary
    }

    async function loadNotices() {
      try {
        const response = await fetch('/api/notices'); // Ensure this endpoint returns an array of notice objects
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const notices = await response.json();
        console.log(notices); // Log the notices to see their structure

        const noticesBody = document.getElementById('noticesBody');
        noticesBody.innerHTML = ''; // Clear the table before adding new rows

        // Iterate over each notice and append it to the table
        notices.forEach(notice => {
          const row = document.createElement('tr');
          row.innerHTML = `
              <td>${notice.notice}</td> <!-- Correctly accessing the notice text -->
              <td>${new Date(notice.date).toLocaleDateString()}</td> <!-- Displaying the formatted date -->
              <td>
                <button onclick="deleteNotice('${notice._id}')">Delete</button>
              </td>
            `;
          noticesBody.appendChild(row);
        });
      } catch (error) {
        console.error('Error fetching notices:', error);
      }
    }

    async function addNotice(notice) {
   console.log('Notice text:', notice); // Log input data
   try {
      const response = await fetch('/add-notice', {
         method: 'POST',
         headers: {
            'Content-Type': 'application/json',
         },
         body: JSON.stringify({ notice }),  // Sending notice as JSON
      });

      if (response.ok) {
         console.log('Notice added successfully'); // Log success
         document.getElementById('notice').value = ''; // Clear input
         loadNotices(); // Reload notices on success
      } else {
         console.error('Failed to add notice');
      }
   } catch (error) {
      console.error('Error:', error);
   }
}



    async function deleteNotice(id) {
   const confirmDelete = confirm("Are you sure you want to delete this notice?");
   if (confirmDelete) {
      try {
         const response = await fetch(`/api/notices/${id}`, { method: 'DELETE' }); // Corrected syntax
         if (response.ok) {
            console.log('Notice deleted successfully');
            loadNotices(); // Reload the notices after deletion
         } else {
            console.error('Failed to delete notice');
         }
      } catch (error) {
         console.error('Error deleting notice:', error);
      }
   }
}

    function scrollToNotices() {
      const noticesSection = document.querySelector('.notices-section');
      noticesSection.scrollIntoView({ behavior: 'smooth' });
    }

    // Load notices when the page loads
    window.onload = loadNotices;
  </script>
</body>

</html>